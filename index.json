[{"content":"演示案例架构图 中间件服务构建 根据SpringCloudAlibaba与SpringCloud的对应关系,本次案例实现采用中间件/框架版本如下\nSpring Boot: 2.6.13 Spring Cloud: 2021.0.5 Spring Cloud Alibaba: 2021.0.5.0 Nacos: 2.2.0 Seata: 1.6.1 Mysql: 8.1.0 Nacos构建 从这里下载Nacos预编译包,nacos配置数据我们采用持久化到数据库的方式\n首先准备nacos的数据库实例:\nversion: \u0026#39;3.1\u0026#39; services: nacos: image: mysql:8.1.0 restart: always container_name: mysql_nacos environment: MYSQL_ROOT_PASSWORD: 5566 command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 ports: - 3306:3306 volumes: - ./config/data/mysql:/var/lib/mysql 然后修改Nacos包中的scheme导入到该数据库实例中\n修改conf目录下的application.properties文件,主要修改以下几项(单机模式,集群参考官方文档修改):\n#*************** Config Module Related Configurations ***************# ### If use MySQL as datasource: spring.datasource.platform=mysql ### Count of DB: db.num=1 ### Connect URL of DB: db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8\u0026amp;connectTimeout=1000\u0026amp;socketTimeout=3000\u0026amp;autoReconnect=true\u0026amp;useUnicode=true\u0026amp;useSSL=false\u0026amp;serverTimezone=UTC db.user.0=root db.password.0=5566 启动nacos:\n/Users/fanzhengxiang/data/service/nacos2.2.0/bin/startup.sh -m standalone\nSeata构建 从这里下载seata的预编译包,本次实验seata数据同样持久化到数据库中,准备一个数据库实例\nversion: \u0026#39;3.1\u0026#39; services: seata_db: image: mysql:8.1.0 restart: always container_name: mysql_seata environment: MYSQL_ROOT_PASSWORD: 5566 command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 ports: - 3307:3306 volumes: - ./config/data/mysql:/var/lib/mysql 将mysql的建表数据导入到seata的数据库实例中\n修改seata的启动配置文件conf/application.yml,主要修改config项,registry项目,store项目,以下是实例\n注意:由于mysql的版本为8,所以驱动连接为com.mysql.cj.jdbc.Driver,并且需要下载mysql8的java驱动到seata的lib报下\n# Copyright 1999-2019 Seata.io Group. # # Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. server: port: 7091 spring: application: name: seata-server logging: config: classpath:logback-spring.xml file: path: ${user.home}/logs/seata # extend: # logstash-appender: # destination: 127.0.0.1:4560 # kafka-appender: # bootstrap-servers: 127.0.0.1:9092 # topic: logback_to_logstash console: user: username: seata password: seata seata: config: # support: nacos 、 consul 、 apollo 、 zk 、 etcd3 type: nacos nacos: server-addr: 127.0.0.1:8848 namespace: group: SEATA_GROUP username: password: context-path: ##if use MSE Nacos with auth, mutex with username/password attribute #access-key: #secret-key: data-id: seataServer.properties registry: # support: nacos 、 eureka 、 redis 、 zk 、 consul 、 etcd3 、 sofa type: nacos nacos: application: seata-server server-addr: 127.0.0.1:8848 group: SEATA_GROUP namespace: cluster: default username: password: context-path: ##if use MSE Nacos with auth, mutex with username/password attribute #access-key: #secret-key: store: db: datasource: druid db-type: mysql ## 这里注意mysql8的驱动连接为com.mysql.cj.jdbc.Driver driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3307/seata?rewriteBatchedStatements=true user: root password: 5566 min-conn: 10 max-conn: 100 global-table: global_table branch-table: branch_table lock-table: lock_table distributed-lock-table: distributed_lock query-limit: 1000 max-wait: 5000 # server: # service-port: 8091 #If not configured, the default is \u0026#39;${server.port} + 1000\u0026#39; security: secretKey: SeataSecretKey0c382ef121d778043159209298fd40bf3850a017 tokenValidityInMilliseconds: 1800000 ignore: urls: /,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login 启动seata: nohup sh bin/seata-server.sh -p 18091 -n 1 \u0026amp;\nnacos: 注册信息\nseata控制台\n代码准备 源码在这里查看\n准备三个微服务模块的数据库实例\nversion: \u0026#39;3.1\u0026#39; services: seata_order: image: mysql:8.1.0 restart: always container_name: seata_order environment: MYSQL_ROOT_PASSWORD: 5566 command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 ports: - 3308:3306 volumes: - ./order/config/data/mysql:/var/lib/mysql seata_inventory: image: mysql:8.1.0 restart: always container_name: seata_inventory environment: MYSQL_ROOT_PASSWORD: 5566 command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 ports: - 3309:3306 volumes: - ./inventory/config/data/mysql:/var/lib/mysql seata_account: image: mysql:8.1.0 restart: always container_name: seata_account environment: MYSQL_ROOT_PASSWORD: 5566 command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 ports: - 3310:3306 volumes: - ./account/config/data/mysql:/var/lib/mysql 项目依赖:\n\u0026lt;properties\u0026gt; \u0026lt;maven.compiler.target\u0026gt;8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.source\u0026gt;8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;spring.boot.version\u0026gt;2.6.13\u0026lt;/spring.boot.version\u0026gt; \u0026lt;spring.cloud.version\u0026gt;2021.0.5\u0026lt;/spring.cloud.version\u0026gt; \u0026lt;spring.cloud.alibaba.version\u0026gt;2021.0.5.0\u0026lt;/spring.cloud.alibaba.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.boot.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.cloud.alibaba.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.18.28\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; 以订单服务为例\n项目配置文件application.yml\nserver: port: 8081 # 端口 spring: application: name: order-service datasource: url: jdbc:mysql://127.0.0.1:3308/seata_order?useSSL=false\u0026amp;useUnicode=true\u0026amp;characterEncoding=UTF-8 driver-class-name: com.mysql.cj.jdbc.Driver username: root password: 5566 cloud: nacos: discovery: server-addr: 127.0.0.1:8848 seata: application-id: ${spring.application.name} tx-service-group: ${spring.application.name}-group service: vgroup-mapping: order-service-group: default registry: type: nacos nacos: cluster: default server-addr: localhost namespace: 其中账户服务和库存服务的Feign接口如下\nimport com.aires.feign.dto.AccountReduceBalanceDTO; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; /** * `account-service` 服务的 Feign 客户端 */ @FeignClient(name = \u0026#34;account-service\u0026#34;) public interface AccountServiceFeignClient { @PostMapping(\u0026#34;/account/reduce-balance\u0026#34;) void reduceBalance(@RequestBody AccountReduceBalanceDTO accountReduceBalanceDTO); } import com.aires.feign.dto.ProductReduceStockDTO; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; /** * `product-service` 服务的 Feign 客户端 */ @FeignClient(name = \u0026#34;product-service\u0026#34;) public interface ProductServiceFeignClient { @PostMapping(\u0026#34;/product/reduce-stock\u0026#34;) void reduceStock(@RequestBody ProductReduceStockDTO productReduceStockDTO); } 下单的核心业务代码\n@Service public class OrderServiceImpl implements OrderService { private Logger logger = LoggerFactory.getLogger(getClass()); @Resource private OrderDao orderDao; @Resource private AccountServiceFeignClient accountService; @Resource private ProductServiceFeignClient productService; @Override @GlobalTransactional public Integer createOrder(Long userId, Long productId, Integer price) { Integer amount = 1; // 购买数量，暂时设置为 1。 logger.info(\u0026#34;[createOrder] 当前 XID: {}\u0026#34;, RootContext.getXID()); // 扣减库存 productService.reduceStock(new ProductReduceStockDTO().setProductId(productId).setAmount(amount)); // 扣减余额 accountService.reduceBalance(new AccountReduceBalanceDTO().setUserId(userId).setPrice(price)); // 保存订单 OrderDO order = new OrderDO().setUserId(userId).setProductId(productId).setPayAmount(amount * price); orderDao.saveOrder(order); logger.info(\u0026#34;[createOrder] 保存订单: {}\u0026#34;, order.getId()); // 返回订单编号 return order.getId(); } } 分布式事务演示 // TODO\n","permalink":"https://www.atomicbot.cloud/posts/tech/seata_at%E6%A8%A1%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%AE%9E%E8%B7%B5/","summary":"演示案例架构图 中间件服务构建 根据SpringCloudAlibaba与SpringCloud的对应关系,本次案例实现采用中间件/框架版本如下 Spring Boot: 2.6.13 Spring Cloud: 2021.0.5 Spring Cloud Alibaba: 2021.0.5.0 Nacos: 2.2.0 Seata: 1.6.1 Mysql: 8.1.0 Nacos构建 从这里下载Nacos预编译包,nacos配置数据我们采用持久化到数据库的方式 首先准备nacos","title":"Spring Cloud Feign \u0026\u0026 Seata At模式分布式事务实践"},{"content":"Spring Cloud Feign 在异步接口执行的过程中传递请求头Token 业务流程 用户发起请求后,在A服务中执行业务逻辑,执行过程中需要调用其他微服务B进行流程审批,简单方式是在A服务中所有逻辑(1,2,3)采用同步逻辑放在一个事务中,但是如果调用B服务的过程中,处理逻辑很复杂,会导致A服务的请求一直阻塞,用户体验很不好\n优化后的逻辑为将第2步,调整为异步逻辑,异步调用服务B,可以使A服务快速完成逻辑处理,相应用户,B服务在流程发起成功之后,再回调A服务,回写流程发起的结果(流程发起成功或者流程发起失败的原因),此时就引申出一个问题: 在异步调用时,feign接口的请求会丢失掉请求头中的Token,导致在调用服务B时出现401\n解决方案 网上大多数的解决办法都是抄来抄去使用拦截器方式实现,不推荐,我这里采用的是Feign官方的解决方案,Feign Builder\n手动创建Feign Client\n实际操作 微服务B现有的Feign接口如下:\n@FeignClient( name = \u0026#34;eip-bpm-runtime\u0026#34;, url = \u0026#34;${eip-bpm-runtime:}\u0026#34;, fallbackFactory = FlowApiFallback.class ) public interface FlowApi { @RequestMapping( value = {\u0026#34;/flow/instance/v1/start\u0026#34;}, method = {RequestMethod.POST}, produces = {\u0026#34;application/json; charset=utf-8\u0026#34;} ) ObjectNode start(@RequestBody JSONObject var1) throws Exception; } 现在需要在A服务中手动创建一个FlowApi的实例发起调用\n首先在A服务中创建一个配置类\nimport com.aliyun.openservices.shade.com.alibaba.fastjson.support.spring.FastJsonJsonView; import com.fasterxml.jackson.databind.ObjectMapper; import com.hotent.api.FlowApi; import feign.Client; import feign.Feign; import org.apache.http.HttpHeaders; import org.springframework.beans.factory.ObjectFactory; import org.springframework.boot.autoconfigure.http.HttpMessageConverters; import org.springframework.cloud.openfeign.support.SpringDecoder; import org.springframework.cloud.openfeign.support.SpringEncoder; import org.springframework.cloud.openfeign.support.SpringMvcContract; import org.springframework.http.converter.HttpMessageConverter; import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; import org.springframework.stereotype.Component; import javax.annotation.Resource; /** * BPM 异步feign请求头设置 * * @author kiki * @date 2022/1/13 14:25 * @since 0.0.1 */ @Component public class BpmFlowApiConfig { @Resource private Client client; /** * 接口请求path */ private String url; public void setUrl(String url) { this.url = url; } public FlowApi flowApiClient(String accessToken){ HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter(new ObjectMapper()); ObjectFactory\u0026lt;HttpMessageConverters\u0026gt; converter = () -\u0026gt; new HttpMessageConverters(jsonConverter); return Feign.builder().client(client) .encoder(new SpringEncoder(converter)) .decoder(new SpringDecoder(converter)) .contract(new SpringMvcContract()) .requestInterceptor(template -\u0026gt; template.header(org.springframework.http.HttpHeaders.AUTHORIZATION, accessToken)) .requestInterceptor(template -\u0026gt; template.header(HttpHeaders.CONTENT_TYPE, FastJsonJsonView.DEFAULT_CONTENT_TYPE)) .target(FlowApi.class, url); } } 然后在需要发起对B服务调用的地方注入该配置类,并手动构建Feign客户端发起调用\n/** * desc * * @author kiki * @date 2022/1/13 11:37 * @since 0.0.1 */ @Service @Slf4j public class IAsyncServiceImpl implements IAsyncService { /** * 目标微服务的服务名称 * */ @Value(\u0026#34;${bpm.url:http://eip-bpm-runtime/}\u0026#34;) private String flowApiUrl; @Resource private BpmFlowApiConfig bpmFlowApiConfig; /** * 异步上传发票并发起审批 * * @param paymentAddEo 请求参数 * @param header 上游请求的Token */ @Async @Override public void uploadInvoicesAndStartBpmProcess(PaymentBillAddReqDto paymentAddEo, String header) { // TODO A服务的自身业务逻辑... startNewBpmProcess(paymentAddEo, fileIdList, header); // TODO A服务的自身后续业务逻辑... } private void startNewBpmProcess(PaymentBillAddReqDto paymentAddEo, List\u0026lt;String\u0026gt; fileIdList, String header) { try { // ...省略业务逻辑 log.info(\u0026#34;{}发起bpm申请流程参数：{}\u0026#34;, paymentBillDesc, paramStr); // 这里是发起调用配置的关键 // 1.设置调用服务的服务名 // 2.手动为Feign Client设置header(token) bpmFlowApiConfig.setUrl(flowApiUrl); start = bpmFlowApiConfig.flowApiClient(header).start(JSON.parseObject(paramStr)); ObjectMapper objectMapper = new ObjectMapper(); String resultStr = objectMapper.writeValueAsString(start); log.info(\u0026#34;{}发起BPM审批请求结果：{}\u0026#34;, paymentBillDesc, resultStr); // ...省略业务逻辑 bpmProcessService.add(reqDto); } catch (Exception e) { log.error(\u0026#34;{}失败，bpm返回信息{}，保存的流程信息{}，错误信息：{}\u0026#34;, paymentBillDesc, JSON.toJSONString(start), JSONObject.toJSONString(paymentAddEo, SerializerFeature.PrettyFormat), e); throw new BizException(String.format(\u0026#34;%s发起BPM审批失败！\u0026#34;, e.getMessage())); } } } 其中,A服务在请求发起时,传递的Token需要在A服务发起调用前事先获取\nServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes(); HttpServletRequest request = requestAttributes.getRequest(); String accessToken = request.getHeader(\u0026#34;Access-Token\u0026#34;); ","permalink":"https://www.atomicbot.cloud/posts/tech/springcloudfeign%E5%9C%A8%E5%BC%82%E6%AD%A5%E6%8E%A5%E5%8F%A3%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BC%A0%E9%80%92%E8%AF%B7%E6%B1%82%E5%A4%B4token/","summary":"Spring Cloud Feign 在异步接口执行的过程中传递请求头Token 业务流程 用户发起请求后,在A服务中执行业务逻辑,执行过程中需要调用其他微服务B进行流程审批,简单方式是在A服务中所有逻辑(1,2,3)采用同步逻辑放在一个事务中,但是如果调用B服务的过程中,处理逻辑很复杂,会导致A服务的请求一直阻塞","title":"Spring Cloud Feign在异步接口执行的过程中传递请求头Token"},{"content":" 🔖🔖 211非科班程序员,自学编程混口饭吃,坐标成都,在某中大型食品公司任Java开发工程师一枚。\n主要技术栈涉猎有以下: 💥 Java核心 💥 Spring Boot Spring Cloud生态 💥 Spring生态常用且成熟的中间件 🚀 Vue2+Vue3 (学习中,暂时还差点火候) ⚡️ Mysql数据库与Linux服务器 🚀 CI/CD,持续集成 💥 微服务集群+k8s容器生态 🙈 Flutter App 开发\u0026hellip;(学习中) \u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip; 简单先写这些,个人项目后续完善 🎉 🎉 🎉\n","permalink":"https://www.atomicbot.cloud/about/","summary":"🔖🔖 211非科班程序员,自学编程混口饭吃,坐标成都,在某中大型食品公司任Java开发工程师一枚。 主要技术栈涉猎有以下: 💥 Java核心 💥 Spring Boot Spring Cloud生态 💥 Spring生态常用且成熟的中间件 🚀 Vue2+Vue3 (学习中,暂时还差点火候) ⚡️ Mysql数据库与Linux服务器 🚀 CI/CD,持续集成","title":"我的一些信息🎉🎉🎉 "},{"content":"","permalink":"https://www.atomicbot.cloud/posts/tech/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8B%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/","summary":"","title":"Redis高可用之集群模式"},{"content":"","permalink":"https://www.atomicbot.cloud/posts/tech/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8B%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/","summary":"","title":"Redis高可用之哨兵模式"},{"content":"","permalink":"https://www.atomicbot.cloud/posts/tech/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8B%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F/","summary":"","title":"Redis高可用之主从模式"},{"content":"介绍 Redis通常用来作为应用程序与数据库DB之间的一层缓存中间件,来保证数据的访问效率,那既然是一层中间件,必然存在宕机、崩溃的问题,一旦Redis服务不可用,可能产生的后果包括:\nRedis进程中保存的数据全部丢失,引文Redis数据是存在RAM中的 数据访问从内存级别降低至IO级别,性能下降明显 原本大量访问缓存的请求现在都请求到数据库,可能导致数据库压力过大,甚至雪崩 所以Redis中间件崩溃后的结果是很严重的,为了避免宕机后RAM中的数据丢失,Redis提供2中数据持久化的能力,RDB (Redis Database)和AOF (Append Only File)\n关于RDB Redis和Mysql的最大区别就是一个将数据存储在内存,一个存储在磁盘,如果每次数据的变化CUD都要同时写内存和硬盘,那性能成本就太高了,而且还需要保证原子性,避免内存和磁盘数据的一致性\nRDB 为了避免修改数据时实时写入内存,Redis提供了RDB,内存快照功能,内存快照是指在某一时刻,Redis内存中数据的状态,快照文件就称之为RDB文件,Redis可以通过定期执行RDB内存快照,将Redis内存中的数据备份到磁盘,便可以避免高频的更新内存,既保证了Redis的高效读写,还实现了宕机后快速恢复数据\nRDB快照 Redis提供2种方式生成RDB快照文件:\nSAVE: 由主线程来执行,同步阻塞,只有当save命令保存完快照后,主线程才能响应应用程序的请求 BGSAVE:执行后,会立即返回OK,同时调用glibc的函数,fork出一个子进程来持久化快照,快照的持久化完全交给子进程,主进程对于应用程序的读写不阻塞,相当于写RDB的操作是一个异步动作 SAVE模式 SAVE模式下的快照持久化操作是主进程在执行,由于Redis是单线程,会阻塞应用程序的请求,不建议使用\nBGSAVE模式 Redis使用操作系统的多进程写时复制COW(copy on write)来实现快照持久化,由于fork出来的子进程和Redis主进程共享内存,所以子进程读取主进程的数据来写入RDB文件,主进程可以继续响应应用程序的请求,2者互不影响,并且在创建RDB文件时,程序会对内存中的数据做一遍检查,仅仅会将未过期的键值保存到RDB文件中\nRDB配置 RDB模式何时进行快照RDB文件的存储,是在Redis配置文件中进行指定,以下截取部分源码中的配置说明\n避免RDB执行频率过高 虽然说RDB快照存储,是在子进程中进行的,不会影响主进程对客户端的请求处理,但是如果RDB执行频率过高就会导致严重的性能开销\n频繁的创建RDB文件写入内存,导致磁盘压力过大,效率降低 fork出来的子进程由于共享主线程的数据,一定程度上也会阻塞主线程的运行,主进程使用的内存越大,存储的数据越多,阻塞时间越长 RDB总结 快照RDB是对内存数据进行的全量持久化,但是生成RDB需要把握一个度,频率太快会导致额外开销过大,性能降低,频率太低的话,RDB文件和内存中的数据差异就越大,丢失的数据就越多 RDB建议采用二进制+数据压缩方式写入磁盘,默认也是开启RDB压缩的 AFO日志文件 AOF日志文件存储的是Redis对内存的修改的指令记录,假设AOF日志文件记录了自Redis实例创建以来的所有修改内存的指令序列,那么可以对一个空的Redis实例按照顺序执行这些指令就可以还原所有数据,类似与git的rebase\n日志变更对比 AOF记录日志有2种方式:\n写前日志:在执行Redis命令之前,先将指令记录到AOF日志文件,然后再执行指令,类似于MySql种的redo log,修改数据前先记录日志 写后日志:先执行指令,然后再将指令写入AOF日志文件 日志格式 Redis在接收到set keyName someValue指令的时候,会先将数据写到内存,然后按照如下的格式写入 AOF文件中. *3表示该条指令包含三个部分,每个部分都是$ + 数字开头,后面是每个部分的具体内容: 指令、键、值,数字表示这部分命令占用的自节大小\n推荐使用写后日志的模式,因为这样在记录日志时不用对指令做语法检查,如果使用写前日志,需要对指令做语法检查\n可能存在的问题 可能存在数据丢失:Redis执行完指令后还没有写入AOF日志成功就宕机了 AOF避免了当前明亮的阻塞,但是AOF是主线程在执行,将日志写入磁盘的过程中,如果IO压力过大,就会导致执行缓慢 写回策略 上面的问题在Redis高频读写时是必然存在的,想要解决,在写入时做一层缓冲就可以了,避免直塞,Redis提供了一种执行策略叫做回写策略\n回写策略说明 为了提高AOF日志文件的写入效率,回写策略会做入下调整:\n在调用write函数项日志文件写入数据时,并不是真正的落盘,而是将数据写入到操作系统的内存缓冲区. 当缓冲区的空间被填满或者超过了指定的阈值,才会真正将缓冲区的数据写入到磁盘中,这种方式虽然提高了效率,但是可能存在数据安全性问题,如果Redis发生了宕机,那么缓冲区的数据就会丢失,为此系统提供了fsync和sdatasync2个同步函数,它们可以强制让操作系统立即将缓冲区中的数据写入到硬盘中 Redis的AOF配置项appendfsync写回策略直接决定了持久化功能的效率和安全性,以下是appendfsync的具体配置\nalways:同步写回,每次执行完指令,就将缓冲区的数据写回到AOF文件中 everysec:每秒写回,执行完命令后,将数据写入到缓冲区,缓冲区每隔一秒将数据写入到AOF文件 no:操作系统控制,在执行完指令后,将数据写入到缓冲区,由操作系统决定何时写回到磁盘 写磁盘会带来性能损耗,这取决于你的应用程序对性能和数据可靠性的取舍\nalways: 性能最差,安全性最好,数据不会丢失 everysec:如果Redis宕机,可能会丢失1秒时间周期的数据,在性能和可靠性上折中 no:性能最好,但有可能丢失更多数据 写回策略的选择 系统要求高性能: 选择no策略 系统要求数据高可靠性:选择always策略 能够接收少量数据丢失又想要较为良好的性能:选择everysec策略(默认策略和推荐策略) 混合RDB和AOF模式 无论是RDB还是AOF总是感觉不够尽善尽美,使用RDB来恢复内存状态,势必会丢失一部分数据,使用AOF日志文件重放对性能又有一定影响,因为重放的AOF日志文件可能会很大,Redis在4.0解决了这个问题,采用一种新的持久化方式:混合持久化 该模式默认是关闭的\n将RDB文件和生成RDB快照时间点后的AOF增量日志存放在一起,这个时候AOF文件中就不再是整个实例的全量日志,而是最近一次RDB快照点之后发生的增量日志,通常这部分AOF文件会很小,所以执行顺序就变成如下:\n查找RDB内容,如果存在就先加载RDB文件,然后再重放AOF日志\n没有RDB文件,就直接重放AOF文件\n这样快照就不用频繁的执行,同时由于AOF文件记录的是最近的快照点之后的指令,避免了单词重放日志文件过大的问题\n","permalink":"https://www.atomicbot.cloud/posts/tech/redis%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E9%AB%98%E5%8F%AF%E7%94%A8/","summary":"介绍 Redis通常用来作为应用程序与数据库DB之间的一层缓存中间件,来保证数据的访问效率,那既然是一层中间件,必然存在宕机、崩溃的问题,一旦Redis服务不可用,可能产生的后果包括: Redis进程中保存的数据全部丢失,引文Redis数据是存在RAM中的 数据访问从内存级别降低至IO","title":"Redis数据持久化高可用"}]